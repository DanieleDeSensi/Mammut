// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cpufreq-remote.proto

#ifndef PROTOBUF_cpufreq_2dremote_2eproto__INCLUDED
#define PROTOBUF_cpufreq_2dremote_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

namespace mammut {
namespace cpufreq {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_cpufreq_2dremote_2eproto();
void protobuf_AssignDesc_cpufreq_2dremote_2eproto();
void protobuf_ShutdownFile_cpufreq_2dremote_2eproto();

class GetDomains;
class GetDomainsRes;
class GetDomainsRes_Domain;
class GetAvailableFrequencies;
class GetAvailableFrequenciesRes;
class GetAvailableGovernors;
class GetAvailableGovernorsRes;
class GetCurrentFrequency;
class GetCurrentFrequencyRes;
class GetCurrentGovernor;
class GetCurrentGovernorRes;
class ChangeFrequency;
class ChangeFrequencyBounds;
class ChangeGovernor;
class Result;

// ===================================================================

class GetDomains : public ::google::protobuf::MessageLite {
 public:
  GetDomains();
  virtual ~GetDomains();

  GetDomains(const GetDomains& from);

  inline GetDomains& operator=(const GetDomains& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const GetDomains& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const GetDomains* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(GetDomains* other);

  // implements Message ----------------------------------------------

  GetDomains* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const GetDomains& from);
  void MergeFrom(const GetDomains& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mammut.cpufreq.GetDomains)
 private:

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_cpufreq_2dremote_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_cpufreq_2dremote_2eproto();
  #endif
  friend void protobuf_AssignDesc_cpufreq_2dremote_2eproto();
  friend void protobuf_ShutdownFile_cpufreq_2dremote_2eproto();

  void InitAsDefaultInstance();
  static GetDomains* default_instance_;
};
// -------------------------------------------------------------------

class GetDomainsRes_Domain : public ::google::protobuf::MessageLite {
 public:
  GetDomainsRes_Domain();
  virtual ~GetDomainsRes_Domain();

  GetDomainsRes_Domain(const GetDomainsRes_Domain& from);

  inline GetDomainsRes_Domain& operator=(const GetDomainsRes_Domain& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const GetDomainsRes_Domain& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const GetDomainsRes_Domain* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(GetDomainsRes_Domain* other);

  // implements Message ----------------------------------------------

  GetDomainsRes_Domain* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const GetDomainsRes_Domain& from);
  void MergeFrom(const GetDomainsRes_Domain& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // repeated uint32 virtual_cores_ids = 2 [packed = true];
  inline int virtual_cores_ids_size() const;
  inline void clear_virtual_cores_ids();
  static const int kVirtualCoresIdsFieldNumber = 2;
  inline ::google::protobuf::uint32 virtual_cores_ids(int index) const;
  inline void set_virtual_cores_ids(int index, ::google::protobuf::uint32 value);
  inline void add_virtual_cores_ids(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      virtual_cores_ids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_virtual_cores_ids();

  // @@protoc_insertion_point(class_scope:mammut.cpufreq.GetDomainsRes.Domain)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > virtual_cores_ids_;
  mutable int _virtual_cores_ids_cached_byte_size_;
  ::google::protobuf::uint32 id_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_cpufreq_2dremote_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_cpufreq_2dremote_2eproto();
  #endif
  friend void protobuf_AssignDesc_cpufreq_2dremote_2eproto();
  friend void protobuf_ShutdownFile_cpufreq_2dremote_2eproto();

  void InitAsDefaultInstance();
  static GetDomainsRes_Domain* default_instance_;
};
// -------------------------------------------------------------------

class GetDomainsRes : public ::google::protobuf::MessageLite {
 public:
  GetDomainsRes();
  virtual ~GetDomainsRes();

  GetDomainsRes(const GetDomainsRes& from);

  inline GetDomainsRes& operator=(const GetDomainsRes& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const GetDomainsRes& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const GetDomainsRes* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(GetDomainsRes* other);

  // implements Message ----------------------------------------------

  GetDomainsRes* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const GetDomainsRes& from);
  void MergeFrom(const GetDomainsRes& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  typedef GetDomainsRes_Domain Domain;

  // accessors -------------------------------------------------------

  // repeated .mammut.cpufreq.GetDomainsRes.Domain domains = 1;
  inline int domains_size() const;
  inline void clear_domains();
  static const int kDomainsFieldNumber = 1;
  inline const ::mammut::cpufreq::GetDomainsRes_Domain& domains(int index) const;
  inline ::mammut::cpufreq::GetDomainsRes_Domain* mutable_domains(int index);
  inline ::mammut::cpufreq::GetDomainsRes_Domain* add_domains();
  inline const ::google::protobuf::RepeatedPtrField< ::mammut::cpufreq::GetDomainsRes_Domain >&
      domains() const;
  inline ::google::protobuf::RepeatedPtrField< ::mammut::cpufreq::GetDomainsRes_Domain >*
      mutable_domains();

  // @@protoc_insertion_point(class_scope:mammut.cpufreq.GetDomainsRes)
 private:

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::mammut::cpufreq::GetDomainsRes_Domain > domains_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_cpufreq_2dremote_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_cpufreq_2dremote_2eproto();
  #endif
  friend void protobuf_AssignDesc_cpufreq_2dremote_2eproto();
  friend void protobuf_ShutdownFile_cpufreq_2dremote_2eproto();

  void InitAsDefaultInstance();
  static GetDomainsRes* default_instance_;
};
// -------------------------------------------------------------------

class GetAvailableFrequencies : public ::google::protobuf::MessageLite {
 public:
  GetAvailableFrequencies();
  virtual ~GetAvailableFrequencies();

  GetAvailableFrequencies(const GetAvailableFrequencies& from);

  inline GetAvailableFrequencies& operator=(const GetAvailableFrequencies& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const GetAvailableFrequencies& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const GetAvailableFrequencies* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(GetAvailableFrequencies* other);

  // implements Message ----------------------------------------------

  GetAvailableFrequencies* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const GetAvailableFrequencies& from);
  void MergeFrom(const GetAvailableFrequencies& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:mammut.cpufreq.GetAvailableFrequencies)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 id_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_cpufreq_2dremote_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_cpufreq_2dremote_2eproto();
  #endif
  friend void protobuf_AssignDesc_cpufreq_2dremote_2eproto();
  friend void protobuf_ShutdownFile_cpufreq_2dremote_2eproto();

  void InitAsDefaultInstance();
  static GetAvailableFrequencies* default_instance_;
};
// -------------------------------------------------------------------

class GetAvailableFrequenciesRes : public ::google::protobuf::MessageLite {
 public:
  GetAvailableFrequenciesRes();
  virtual ~GetAvailableFrequenciesRes();

  GetAvailableFrequenciesRes(const GetAvailableFrequenciesRes& from);

  inline GetAvailableFrequenciesRes& operator=(const GetAvailableFrequenciesRes& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const GetAvailableFrequenciesRes& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const GetAvailableFrequenciesRes* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(GetAvailableFrequenciesRes* other);

  // implements Message ----------------------------------------------

  GetAvailableFrequenciesRes* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const GetAvailableFrequenciesRes& from);
  void MergeFrom(const GetAvailableFrequenciesRes& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 frequencies = 1 [packed = true];
  inline int frequencies_size() const;
  inline void clear_frequencies();
  static const int kFrequenciesFieldNumber = 1;
  inline ::google::protobuf::uint32 frequencies(int index) const;
  inline void set_frequencies(int index, ::google::protobuf::uint32 value);
  inline void add_frequencies(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      frequencies() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_frequencies();

  // @@protoc_insertion_point(class_scope:mammut.cpufreq.GetAvailableFrequenciesRes)
 private:

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > frequencies_;
  mutable int _frequencies_cached_byte_size_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_cpufreq_2dremote_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_cpufreq_2dremote_2eproto();
  #endif
  friend void protobuf_AssignDesc_cpufreq_2dremote_2eproto();
  friend void protobuf_ShutdownFile_cpufreq_2dremote_2eproto();

  void InitAsDefaultInstance();
  static GetAvailableFrequenciesRes* default_instance_;
};
// -------------------------------------------------------------------

class GetAvailableGovernors : public ::google::protobuf::MessageLite {
 public:
  GetAvailableGovernors();
  virtual ~GetAvailableGovernors();

  GetAvailableGovernors(const GetAvailableGovernors& from);

  inline GetAvailableGovernors& operator=(const GetAvailableGovernors& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const GetAvailableGovernors& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const GetAvailableGovernors* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(GetAvailableGovernors* other);

  // implements Message ----------------------------------------------

  GetAvailableGovernors* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const GetAvailableGovernors& from);
  void MergeFrom(const GetAvailableGovernors& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:mammut.cpufreq.GetAvailableGovernors)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 id_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_cpufreq_2dremote_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_cpufreq_2dremote_2eproto();
  #endif
  friend void protobuf_AssignDesc_cpufreq_2dremote_2eproto();
  friend void protobuf_ShutdownFile_cpufreq_2dremote_2eproto();

  void InitAsDefaultInstance();
  static GetAvailableGovernors* default_instance_;
};
// -------------------------------------------------------------------

class GetAvailableGovernorsRes : public ::google::protobuf::MessageLite {
 public:
  GetAvailableGovernorsRes();
  virtual ~GetAvailableGovernorsRes();

  GetAvailableGovernorsRes(const GetAvailableGovernorsRes& from);

  inline GetAvailableGovernorsRes& operator=(const GetAvailableGovernorsRes& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const GetAvailableGovernorsRes& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const GetAvailableGovernorsRes* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(GetAvailableGovernorsRes* other);

  // implements Message ----------------------------------------------

  GetAvailableGovernorsRes* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const GetAvailableGovernorsRes& from);
  void MergeFrom(const GetAvailableGovernorsRes& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 governors = 1 [packed = true];
  inline int governors_size() const;
  inline void clear_governors();
  static const int kGovernorsFieldNumber = 1;
  inline ::google::protobuf::uint32 governors(int index) const;
  inline void set_governors(int index, ::google::protobuf::uint32 value);
  inline void add_governors(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      governors() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_governors();

  // @@protoc_insertion_point(class_scope:mammut.cpufreq.GetAvailableGovernorsRes)
 private:

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > governors_;
  mutable int _governors_cached_byte_size_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_cpufreq_2dremote_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_cpufreq_2dremote_2eproto();
  #endif
  friend void protobuf_AssignDesc_cpufreq_2dremote_2eproto();
  friend void protobuf_ShutdownFile_cpufreq_2dremote_2eproto();

  void InitAsDefaultInstance();
  static GetAvailableGovernorsRes* default_instance_;
};
// -------------------------------------------------------------------

class GetCurrentFrequency : public ::google::protobuf::MessageLite {
 public:
  GetCurrentFrequency();
  virtual ~GetCurrentFrequency();

  GetCurrentFrequency(const GetCurrentFrequency& from);

  inline GetCurrentFrequency& operator=(const GetCurrentFrequency& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const GetCurrentFrequency& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const GetCurrentFrequency* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(GetCurrentFrequency* other);

  // implements Message ----------------------------------------------

  GetCurrentFrequency* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const GetCurrentFrequency& from);
  void MergeFrom(const GetCurrentFrequency& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // required bool userspace = 2;
  inline bool has_userspace() const;
  inline void clear_userspace();
  static const int kUserspaceFieldNumber = 2;
  inline bool userspace() const;
  inline void set_userspace(bool value);

  // @@protoc_insertion_point(class_scope:mammut.cpufreq.GetCurrentFrequency)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_userspace();
  inline void clear_has_userspace();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 id_;
  bool userspace_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_cpufreq_2dremote_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_cpufreq_2dremote_2eproto();
  #endif
  friend void protobuf_AssignDesc_cpufreq_2dremote_2eproto();
  friend void protobuf_ShutdownFile_cpufreq_2dremote_2eproto();

  void InitAsDefaultInstance();
  static GetCurrentFrequency* default_instance_;
};
// -------------------------------------------------------------------

class GetCurrentFrequencyRes : public ::google::protobuf::MessageLite {
 public:
  GetCurrentFrequencyRes();
  virtual ~GetCurrentFrequencyRes();

  GetCurrentFrequencyRes(const GetCurrentFrequencyRes& from);

  inline GetCurrentFrequencyRes& operator=(const GetCurrentFrequencyRes& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const GetCurrentFrequencyRes& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const GetCurrentFrequencyRes* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(GetCurrentFrequencyRes* other);

  // implements Message ----------------------------------------------

  GetCurrentFrequencyRes* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const GetCurrentFrequencyRes& from);
  void MergeFrom(const GetCurrentFrequencyRes& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 frequency = 1;
  inline bool has_frequency() const;
  inline void clear_frequency();
  static const int kFrequencyFieldNumber = 1;
  inline ::google::protobuf::uint32 frequency() const;
  inline void set_frequency(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:mammut.cpufreq.GetCurrentFrequencyRes)
 private:
  inline void set_has_frequency();
  inline void clear_has_frequency();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 frequency_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_cpufreq_2dremote_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_cpufreq_2dremote_2eproto();
  #endif
  friend void protobuf_AssignDesc_cpufreq_2dremote_2eproto();
  friend void protobuf_ShutdownFile_cpufreq_2dremote_2eproto();

  void InitAsDefaultInstance();
  static GetCurrentFrequencyRes* default_instance_;
};
// -------------------------------------------------------------------

class GetCurrentGovernor : public ::google::protobuf::MessageLite {
 public:
  GetCurrentGovernor();
  virtual ~GetCurrentGovernor();

  GetCurrentGovernor(const GetCurrentGovernor& from);

  inline GetCurrentGovernor& operator=(const GetCurrentGovernor& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const GetCurrentGovernor& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const GetCurrentGovernor* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(GetCurrentGovernor* other);

  // implements Message ----------------------------------------------

  GetCurrentGovernor* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const GetCurrentGovernor& from);
  void MergeFrom(const GetCurrentGovernor& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:mammut.cpufreq.GetCurrentGovernor)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 id_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_cpufreq_2dremote_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_cpufreq_2dremote_2eproto();
  #endif
  friend void protobuf_AssignDesc_cpufreq_2dremote_2eproto();
  friend void protobuf_ShutdownFile_cpufreq_2dremote_2eproto();

  void InitAsDefaultInstance();
  static GetCurrentGovernor* default_instance_;
};
// -------------------------------------------------------------------

class GetCurrentGovernorRes : public ::google::protobuf::MessageLite {
 public:
  GetCurrentGovernorRes();
  virtual ~GetCurrentGovernorRes();

  GetCurrentGovernorRes(const GetCurrentGovernorRes& from);

  inline GetCurrentGovernorRes& operator=(const GetCurrentGovernorRes& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const GetCurrentGovernorRes& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const GetCurrentGovernorRes* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(GetCurrentGovernorRes* other);

  // implements Message ----------------------------------------------

  GetCurrentGovernorRes* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const GetCurrentGovernorRes& from);
  void MergeFrom(const GetCurrentGovernorRes& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 governor = 1;
  inline bool has_governor() const;
  inline void clear_governor();
  static const int kGovernorFieldNumber = 1;
  inline ::google::protobuf::uint32 governor() const;
  inline void set_governor(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:mammut.cpufreq.GetCurrentGovernorRes)
 private:
  inline void set_has_governor();
  inline void clear_has_governor();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 governor_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_cpufreq_2dremote_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_cpufreq_2dremote_2eproto();
  #endif
  friend void protobuf_AssignDesc_cpufreq_2dremote_2eproto();
  friend void protobuf_ShutdownFile_cpufreq_2dremote_2eproto();

  void InitAsDefaultInstance();
  static GetCurrentGovernorRes* default_instance_;
};
// -------------------------------------------------------------------

class ChangeFrequency : public ::google::protobuf::MessageLite {
 public:
  ChangeFrequency();
  virtual ~ChangeFrequency();

  ChangeFrequency(const ChangeFrequency& from);

  inline ChangeFrequency& operator=(const ChangeFrequency& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ChangeFrequency& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const ChangeFrequency* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(ChangeFrequency* other);

  // implements Message ----------------------------------------------

  ChangeFrequency* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const ChangeFrequency& from);
  void MergeFrom(const ChangeFrequency& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // required uint32 frequency = 2;
  inline bool has_frequency() const;
  inline void clear_frequency();
  static const int kFrequencyFieldNumber = 2;
  inline ::google::protobuf::uint32 frequency() const;
  inline void set_frequency(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:mammut.cpufreq.ChangeFrequency)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_frequency();
  inline void clear_has_frequency();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 frequency_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_cpufreq_2dremote_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_cpufreq_2dremote_2eproto();
  #endif
  friend void protobuf_AssignDesc_cpufreq_2dremote_2eproto();
  friend void protobuf_ShutdownFile_cpufreq_2dremote_2eproto();

  void InitAsDefaultInstance();
  static ChangeFrequency* default_instance_;
};
// -------------------------------------------------------------------

class ChangeFrequencyBounds : public ::google::protobuf::MessageLite {
 public:
  ChangeFrequencyBounds();
  virtual ~ChangeFrequencyBounds();

  ChangeFrequencyBounds(const ChangeFrequencyBounds& from);

  inline ChangeFrequencyBounds& operator=(const ChangeFrequencyBounds& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ChangeFrequencyBounds& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const ChangeFrequencyBounds* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(ChangeFrequencyBounds* other);

  // implements Message ----------------------------------------------

  ChangeFrequencyBounds* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const ChangeFrequencyBounds& from);
  void MergeFrom(const ChangeFrequencyBounds& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // required uint32 lower_bound = 2;
  inline bool has_lower_bound() const;
  inline void clear_lower_bound();
  static const int kLowerBoundFieldNumber = 2;
  inline ::google::protobuf::uint32 lower_bound() const;
  inline void set_lower_bound(::google::protobuf::uint32 value);

  // required uint32 upper_bound = 3;
  inline bool has_upper_bound() const;
  inline void clear_upper_bound();
  static const int kUpperBoundFieldNumber = 3;
  inline ::google::protobuf::uint32 upper_bound() const;
  inline void set_upper_bound(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:mammut.cpufreq.ChangeFrequencyBounds)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_lower_bound();
  inline void clear_has_lower_bound();
  inline void set_has_upper_bound();
  inline void clear_has_upper_bound();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 lower_bound_;
  ::google::protobuf::uint32 upper_bound_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_cpufreq_2dremote_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_cpufreq_2dremote_2eproto();
  #endif
  friend void protobuf_AssignDesc_cpufreq_2dremote_2eproto();
  friend void protobuf_ShutdownFile_cpufreq_2dremote_2eproto();

  void InitAsDefaultInstance();
  static ChangeFrequencyBounds* default_instance_;
};
// -------------------------------------------------------------------

class ChangeGovernor : public ::google::protobuf::MessageLite {
 public:
  ChangeGovernor();
  virtual ~ChangeGovernor();

  ChangeGovernor(const ChangeGovernor& from);

  inline ChangeGovernor& operator=(const ChangeGovernor& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ChangeGovernor& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const ChangeGovernor* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(ChangeGovernor* other);

  // implements Message ----------------------------------------------

  ChangeGovernor* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const ChangeGovernor& from);
  void MergeFrom(const ChangeGovernor& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // required uint32 governor = 2;
  inline bool has_governor() const;
  inline void clear_governor();
  static const int kGovernorFieldNumber = 2;
  inline ::google::protobuf::uint32 governor() const;
  inline void set_governor(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:mammut.cpufreq.ChangeGovernor)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_governor();
  inline void clear_has_governor();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 governor_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_cpufreq_2dremote_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_cpufreq_2dremote_2eproto();
  #endif
  friend void protobuf_AssignDesc_cpufreq_2dremote_2eproto();
  friend void protobuf_ShutdownFile_cpufreq_2dremote_2eproto();

  void InitAsDefaultInstance();
  static ChangeGovernor* default_instance_;
};
// -------------------------------------------------------------------

class Result : public ::google::protobuf::MessageLite {
 public:
  Result();
  virtual ~Result();

  Result(const Result& from);

  inline Result& operator=(const Result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const Result& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const Result* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(Result* other);

  // implements Message ----------------------------------------------

  Result* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const Result& from);
  void MergeFrom(const Result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline bool result() const;
  inline void set_result(bool value);

  // @@protoc_insertion_point(class_scope:mammut.cpufreq.Result)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  bool result_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_cpufreq_2dremote_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_cpufreq_2dremote_2eproto();
  #endif
  friend void protobuf_AssignDesc_cpufreq_2dremote_2eproto();
  friend void protobuf_ShutdownFile_cpufreq_2dremote_2eproto();

  void InitAsDefaultInstance();
  static Result* default_instance_;
};
// ===================================================================


// ===================================================================

// GetDomains

// -------------------------------------------------------------------

// GetDomainsRes_Domain

// required uint32 id = 1;
inline bool GetDomainsRes_Domain::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetDomainsRes_Domain::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetDomainsRes_Domain::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetDomainsRes_Domain::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 GetDomainsRes_Domain::id() const {
  // @@protoc_insertion_point(field_get:mammut.cpufreq.GetDomainsRes.Domain.id)
  return id_;
}
inline void GetDomainsRes_Domain::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:mammut.cpufreq.GetDomainsRes.Domain.id)
}

// repeated uint32 virtual_cores_ids = 2 [packed = true];
inline int GetDomainsRes_Domain::virtual_cores_ids_size() const {
  return virtual_cores_ids_.size();
}
inline void GetDomainsRes_Domain::clear_virtual_cores_ids() {
  virtual_cores_ids_.Clear();
}
inline ::google::protobuf::uint32 GetDomainsRes_Domain::virtual_cores_ids(int index) const {
  // @@protoc_insertion_point(field_get:mammut.cpufreq.GetDomainsRes.Domain.virtual_cores_ids)
  return virtual_cores_ids_.Get(index);
}
inline void GetDomainsRes_Domain::set_virtual_cores_ids(int index, ::google::protobuf::uint32 value) {
  virtual_cores_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:mammut.cpufreq.GetDomainsRes.Domain.virtual_cores_ids)
}
inline void GetDomainsRes_Domain::add_virtual_cores_ids(::google::protobuf::uint32 value) {
  virtual_cores_ids_.Add(value);
  // @@protoc_insertion_point(field_add:mammut.cpufreq.GetDomainsRes.Domain.virtual_cores_ids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
GetDomainsRes_Domain::virtual_cores_ids() const {
  // @@protoc_insertion_point(field_list:mammut.cpufreq.GetDomainsRes.Domain.virtual_cores_ids)
  return virtual_cores_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
GetDomainsRes_Domain::mutable_virtual_cores_ids() {
  // @@protoc_insertion_point(field_mutable_list:mammut.cpufreq.GetDomainsRes.Domain.virtual_cores_ids)
  return &virtual_cores_ids_;
}

// -------------------------------------------------------------------

// GetDomainsRes

// repeated .mammut.cpufreq.GetDomainsRes.Domain domains = 1;
inline int GetDomainsRes::domains_size() const {
  return domains_.size();
}
inline void GetDomainsRes::clear_domains() {
  domains_.Clear();
}
inline const ::mammut::cpufreq::GetDomainsRes_Domain& GetDomainsRes::domains(int index) const {
  // @@protoc_insertion_point(field_get:mammut.cpufreq.GetDomainsRes.domains)
  return domains_.Get(index);
}
inline ::mammut::cpufreq::GetDomainsRes_Domain* GetDomainsRes::mutable_domains(int index) {
  // @@protoc_insertion_point(field_mutable:mammut.cpufreq.GetDomainsRes.domains)
  return domains_.Mutable(index);
}
inline ::mammut::cpufreq::GetDomainsRes_Domain* GetDomainsRes::add_domains() {
  // @@protoc_insertion_point(field_add:mammut.cpufreq.GetDomainsRes.domains)
  return domains_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::mammut::cpufreq::GetDomainsRes_Domain >&
GetDomainsRes::domains() const {
  // @@protoc_insertion_point(field_list:mammut.cpufreq.GetDomainsRes.domains)
  return domains_;
}
inline ::google::protobuf::RepeatedPtrField< ::mammut::cpufreq::GetDomainsRes_Domain >*
GetDomainsRes::mutable_domains() {
  // @@protoc_insertion_point(field_mutable_list:mammut.cpufreq.GetDomainsRes.domains)
  return &domains_;
}

// -------------------------------------------------------------------

// GetAvailableFrequencies

// required uint32 id = 1;
inline bool GetAvailableFrequencies::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetAvailableFrequencies::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetAvailableFrequencies::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetAvailableFrequencies::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 GetAvailableFrequencies::id() const {
  // @@protoc_insertion_point(field_get:mammut.cpufreq.GetAvailableFrequencies.id)
  return id_;
}
inline void GetAvailableFrequencies::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:mammut.cpufreq.GetAvailableFrequencies.id)
}

// -------------------------------------------------------------------

// GetAvailableFrequenciesRes

// repeated uint32 frequencies = 1 [packed = true];
inline int GetAvailableFrequenciesRes::frequencies_size() const {
  return frequencies_.size();
}
inline void GetAvailableFrequenciesRes::clear_frequencies() {
  frequencies_.Clear();
}
inline ::google::protobuf::uint32 GetAvailableFrequenciesRes::frequencies(int index) const {
  // @@protoc_insertion_point(field_get:mammut.cpufreq.GetAvailableFrequenciesRes.frequencies)
  return frequencies_.Get(index);
}
inline void GetAvailableFrequenciesRes::set_frequencies(int index, ::google::protobuf::uint32 value) {
  frequencies_.Set(index, value);
  // @@protoc_insertion_point(field_set:mammut.cpufreq.GetAvailableFrequenciesRes.frequencies)
}
inline void GetAvailableFrequenciesRes::add_frequencies(::google::protobuf::uint32 value) {
  frequencies_.Add(value);
  // @@protoc_insertion_point(field_add:mammut.cpufreq.GetAvailableFrequenciesRes.frequencies)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
GetAvailableFrequenciesRes::frequencies() const {
  // @@protoc_insertion_point(field_list:mammut.cpufreq.GetAvailableFrequenciesRes.frequencies)
  return frequencies_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
GetAvailableFrequenciesRes::mutable_frequencies() {
  // @@protoc_insertion_point(field_mutable_list:mammut.cpufreq.GetAvailableFrequenciesRes.frequencies)
  return &frequencies_;
}

// -------------------------------------------------------------------

// GetAvailableGovernors

// required uint32 id = 1;
inline bool GetAvailableGovernors::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetAvailableGovernors::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetAvailableGovernors::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetAvailableGovernors::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 GetAvailableGovernors::id() const {
  // @@protoc_insertion_point(field_get:mammut.cpufreq.GetAvailableGovernors.id)
  return id_;
}
inline void GetAvailableGovernors::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:mammut.cpufreq.GetAvailableGovernors.id)
}

// -------------------------------------------------------------------

// GetAvailableGovernorsRes

// repeated uint32 governors = 1 [packed = true];
inline int GetAvailableGovernorsRes::governors_size() const {
  return governors_.size();
}
inline void GetAvailableGovernorsRes::clear_governors() {
  governors_.Clear();
}
inline ::google::protobuf::uint32 GetAvailableGovernorsRes::governors(int index) const {
  // @@protoc_insertion_point(field_get:mammut.cpufreq.GetAvailableGovernorsRes.governors)
  return governors_.Get(index);
}
inline void GetAvailableGovernorsRes::set_governors(int index, ::google::protobuf::uint32 value) {
  governors_.Set(index, value);
  // @@protoc_insertion_point(field_set:mammut.cpufreq.GetAvailableGovernorsRes.governors)
}
inline void GetAvailableGovernorsRes::add_governors(::google::protobuf::uint32 value) {
  governors_.Add(value);
  // @@protoc_insertion_point(field_add:mammut.cpufreq.GetAvailableGovernorsRes.governors)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
GetAvailableGovernorsRes::governors() const {
  // @@protoc_insertion_point(field_list:mammut.cpufreq.GetAvailableGovernorsRes.governors)
  return governors_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
GetAvailableGovernorsRes::mutable_governors() {
  // @@protoc_insertion_point(field_mutable_list:mammut.cpufreq.GetAvailableGovernorsRes.governors)
  return &governors_;
}

// -------------------------------------------------------------------

// GetCurrentFrequency

// required uint32 id = 1;
inline bool GetCurrentFrequency::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetCurrentFrequency::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetCurrentFrequency::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetCurrentFrequency::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 GetCurrentFrequency::id() const {
  // @@protoc_insertion_point(field_get:mammut.cpufreq.GetCurrentFrequency.id)
  return id_;
}
inline void GetCurrentFrequency::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:mammut.cpufreq.GetCurrentFrequency.id)
}

// required bool userspace = 2;
inline bool GetCurrentFrequency::has_userspace() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetCurrentFrequency::set_has_userspace() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetCurrentFrequency::clear_has_userspace() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetCurrentFrequency::clear_userspace() {
  userspace_ = false;
  clear_has_userspace();
}
inline bool GetCurrentFrequency::userspace() const {
  // @@protoc_insertion_point(field_get:mammut.cpufreq.GetCurrentFrequency.userspace)
  return userspace_;
}
inline void GetCurrentFrequency::set_userspace(bool value) {
  set_has_userspace();
  userspace_ = value;
  // @@protoc_insertion_point(field_set:mammut.cpufreq.GetCurrentFrequency.userspace)
}

// -------------------------------------------------------------------

// GetCurrentFrequencyRes

// required uint32 frequency = 1;
inline bool GetCurrentFrequencyRes::has_frequency() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetCurrentFrequencyRes::set_has_frequency() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetCurrentFrequencyRes::clear_has_frequency() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetCurrentFrequencyRes::clear_frequency() {
  frequency_ = 0u;
  clear_has_frequency();
}
inline ::google::protobuf::uint32 GetCurrentFrequencyRes::frequency() const {
  // @@protoc_insertion_point(field_get:mammut.cpufreq.GetCurrentFrequencyRes.frequency)
  return frequency_;
}
inline void GetCurrentFrequencyRes::set_frequency(::google::protobuf::uint32 value) {
  set_has_frequency();
  frequency_ = value;
  // @@protoc_insertion_point(field_set:mammut.cpufreq.GetCurrentFrequencyRes.frequency)
}

// -------------------------------------------------------------------

// GetCurrentGovernor

// required uint32 id = 1;
inline bool GetCurrentGovernor::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetCurrentGovernor::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetCurrentGovernor::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetCurrentGovernor::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 GetCurrentGovernor::id() const {
  // @@protoc_insertion_point(field_get:mammut.cpufreq.GetCurrentGovernor.id)
  return id_;
}
inline void GetCurrentGovernor::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:mammut.cpufreq.GetCurrentGovernor.id)
}

// -------------------------------------------------------------------

// GetCurrentGovernorRes

// required uint32 governor = 1;
inline bool GetCurrentGovernorRes::has_governor() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetCurrentGovernorRes::set_has_governor() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetCurrentGovernorRes::clear_has_governor() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetCurrentGovernorRes::clear_governor() {
  governor_ = 0u;
  clear_has_governor();
}
inline ::google::protobuf::uint32 GetCurrentGovernorRes::governor() const {
  // @@protoc_insertion_point(field_get:mammut.cpufreq.GetCurrentGovernorRes.governor)
  return governor_;
}
inline void GetCurrentGovernorRes::set_governor(::google::protobuf::uint32 value) {
  set_has_governor();
  governor_ = value;
  // @@protoc_insertion_point(field_set:mammut.cpufreq.GetCurrentGovernorRes.governor)
}

// -------------------------------------------------------------------

// ChangeFrequency

// required uint32 id = 1;
inline bool ChangeFrequency::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChangeFrequency::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChangeFrequency::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChangeFrequency::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 ChangeFrequency::id() const {
  // @@protoc_insertion_point(field_get:mammut.cpufreq.ChangeFrequency.id)
  return id_;
}
inline void ChangeFrequency::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:mammut.cpufreq.ChangeFrequency.id)
}

// required uint32 frequency = 2;
inline bool ChangeFrequency::has_frequency() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChangeFrequency::set_has_frequency() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ChangeFrequency::clear_has_frequency() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ChangeFrequency::clear_frequency() {
  frequency_ = 0u;
  clear_has_frequency();
}
inline ::google::protobuf::uint32 ChangeFrequency::frequency() const {
  // @@protoc_insertion_point(field_get:mammut.cpufreq.ChangeFrequency.frequency)
  return frequency_;
}
inline void ChangeFrequency::set_frequency(::google::protobuf::uint32 value) {
  set_has_frequency();
  frequency_ = value;
  // @@protoc_insertion_point(field_set:mammut.cpufreq.ChangeFrequency.frequency)
}

// -------------------------------------------------------------------

// ChangeFrequencyBounds

// required uint32 id = 1;
inline bool ChangeFrequencyBounds::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChangeFrequencyBounds::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChangeFrequencyBounds::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChangeFrequencyBounds::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 ChangeFrequencyBounds::id() const {
  // @@protoc_insertion_point(field_get:mammut.cpufreq.ChangeFrequencyBounds.id)
  return id_;
}
inline void ChangeFrequencyBounds::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:mammut.cpufreq.ChangeFrequencyBounds.id)
}

// required uint32 lower_bound = 2;
inline bool ChangeFrequencyBounds::has_lower_bound() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChangeFrequencyBounds::set_has_lower_bound() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ChangeFrequencyBounds::clear_has_lower_bound() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ChangeFrequencyBounds::clear_lower_bound() {
  lower_bound_ = 0u;
  clear_has_lower_bound();
}
inline ::google::protobuf::uint32 ChangeFrequencyBounds::lower_bound() const {
  // @@protoc_insertion_point(field_get:mammut.cpufreq.ChangeFrequencyBounds.lower_bound)
  return lower_bound_;
}
inline void ChangeFrequencyBounds::set_lower_bound(::google::protobuf::uint32 value) {
  set_has_lower_bound();
  lower_bound_ = value;
  // @@protoc_insertion_point(field_set:mammut.cpufreq.ChangeFrequencyBounds.lower_bound)
}

// required uint32 upper_bound = 3;
inline bool ChangeFrequencyBounds::has_upper_bound() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ChangeFrequencyBounds::set_has_upper_bound() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ChangeFrequencyBounds::clear_has_upper_bound() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ChangeFrequencyBounds::clear_upper_bound() {
  upper_bound_ = 0u;
  clear_has_upper_bound();
}
inline ::google::protobuf::uint32 ChangeFrequencyBounds::upper_bound() const {
  // @@protoc_insertion_point(field_get:mammut.cpufreq.ChangeFrequencyBounds.upper_bound)
  return upper_bound_;
}
inline void ChangeFrequencyBounds::set_upper_bound(::google::protobuf::uint32 value) {
  set_has_upper_bound();
  upper_bound_ = value;
  // @@protoc_insertion_point(field_set:mammut.cpufreq.ChangeFrequencyBounds.upper_bound)
}

// -------------------------------------------------------------------

// ChangeGovernor

// required uint32 id = 1;
inline bool ChangeGovernor::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChangeGovernor::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChangeGovernor::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChangeGovernor::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 ChangeGovernor::id() const {
  // @@protoc_insertion_point(field_get:mammut.cpufreq.ChangeGovernor.id)
  return id_;
}
inline void ChangeGovernor::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:mammut.cpufreq.ChangeGovernor.id)
}

// required uint32 governor = 2;
inline bool ChangeGovernor::has_governor() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChangeGovernor::set_has_governor() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ChangeGovernor::clear_has_governor() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ChangeGovernor::clear_governor() {
  governor_ = 0u;
  clear_has_governor();
}
inline ::google::protobuf::uint32 ChangeGovernor::governor() const {
  // @@protoc_insertion_point(field_get:mammut.cpufreq.ChangeGovernor.governor)
  return governor_;
}
inline void ChangeGovernor::set_governor(::google::protobuf::uint32 value) {
  set_has_governor();
  governor_ = value;
  // @@protoc_insertion_point(field_set:mammut.cpufreq.ChangeGovernor.governor)
}

// -------------------------------------------------------------------

// Result

// required bool result = 1;
inline bool Result::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Result::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Result::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Result::clear_result() {
  result_ = false;
  clear_has_result();
}
inline bool Result::result() const {
  // @@protoc_insertion_point(field_get:mammut.cpufreq.Result.result)
  return result_;
}
inline void Result::set_result(bool value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:mammut.cpufreq.Result.result)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace cpufreq
}  // namespace mammut

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_cpufreq_2dremote_2eproto__INCLUDED
