// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: topology-remote.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "topology-remote.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace mammut {
namespace topology {

void protobuf_ShutdownFile_topology_2dremote_2eproto() {
  delete GetTopology::default_instance_;
  delete GetTopologyRes::default_instance_;
  delete GetTopologyRes_Vcc::default_instance_;
  delete GetCpuVendorId::default_instance_;
  delete GetCpuVendorIdRes::default_instance_;
  delete GetCpuFamily::default_instance_;
  delete GetCpuFamilyRes::default_instance_;
  delete GetCpuModel::default_instance_;
  delete GetCpuModelRes::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_topology_2dremote_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_topology_2dremote_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  GetTopology::default_instance_ = new GetTopology();
  GetTopologyRes::default_instance_ = new GetTopologyRes();
  GetTopologyRes_Vcc::default_instance_ = new GetTopologyRes_Vcc();
  GetCpuVendorId::default_instance_ = new GetCpuVendorId();
  GetCpuVendorIdRes::default_instance_ = new GetCpuVendorIdRes();
  GetCpuFamily::default_instance_ = new GetCpuFamily();
  GetCpuFamilyRes::default_instance_ = new GetCpuFamilyRes();
  GetCpuModel::default_instance_ = new GetCpuModel();
  GetCpuModelRes::default_instance_ = new GetCpuModelRes();
  GetTopology::default_instance_->InitAsDefaultInstance();
  GetTopologyRes::default_instance_->InitAsDefaultInstance();
  GetTopologyRes_Vcc::default_instance_->InitAsDefaultInstance();
  GetCpuVendorId::default_instance_->InitAsDefaultInstance();
  GetCpuVendorIdRes::default_instance_->InitAsDefaultInstance();
  GetCpuFamily::default_instance_->InitAsDefaultInstance();
  GetCpuFamilyRes::default_instance_->InitAsDefaultInstance();
  GetCpuModel::default_instance_->InitAsDefaultInstance();
  GetCpuModelRes::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_topology_2dremote_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_topology_2dremote_2eproto_once_);
void protobuf_AddDesc_topology_2dremote_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_topology_2dremote_2eproto_once_,
                 &protobuf_AddDesc_topology_2dremote_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_topology_2dremote_2eproto {
  StaticDescriptorInitializer_topology_2dremote_2eproto() {
    protobuf_AddDesc_topology_2dremote_2eproto();
  }
} static_descriptor_initializer_topology_2dremote_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GetTopology::GetTopology()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mammut.topology.GetTopology)
}

void GetTopology::InitAsDefaultInstance() {
}

GetTopology::GetTopology(const GetTopology& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mammut.topology.GetTopology)
}

void GetTopology::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetTopology::~GetTopology() {
  // @@protoc_insertion_point(destructor:mammut.topology.GetTopology)
  SharedDtor();
}

void GetTopology::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetTopology::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetTopology& GetTopology::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_topology_2dremote_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_topology_2dremote_2eproto();
#endif
  return *default_instance_;
}

GetTopology* GetTopology::default_instance_ = NULL;

GetTopology* GetTopology::New() const {
  return new GetTopology;
}

void GetTopology::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool GetTopology::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:mammut.topology.GetTopology)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:mammut.topology.GetTopology)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mammut.topology.GetTopology)
  return false;
#undef DO_
}

void GetTopology::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mammut.topology.GetTopology)
  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:mammut.topology.GetTopology)
}

int GetTopology::ByteSize() const {
  int total_size = 0;

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetTopology::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetTopology*>(&from));
}

void GetTopology::MergeFrom(const GetTopology& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void GetTopology::CopyFrom(const GetTopology& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTopology::IsInitialized() const {

  return true;
}

void GetTopology::Swap(GetTopology* other) {
  if (other != this) {
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetTopology::GetTypeName() const {
  return "mammut.topology.GetTopology";
}


// ===================================================================

#ifndef _MSC_VER
const int GetTopologyRes_Vcc::kCpuIdFieldNumber;
const int GetTopologyRes_Vcc::kPhysicalCoreIdFieldNumber;
const int GetTopologyRes_Vcc::kVirtualCoreIdFieldNumber;
#endif  // !_MSC_VER

GetTopologyRes_Vcc::GetTopologyRes_Vcc()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mammut.topology.GetTopologyRes.Vcc)
}

void GetTopologyRes_Vcc::InitAsDefaultInstance() {
}

GetTopologyRes_Vcc::GetTopologyRes_Vcc(const GetTopologyRes_Vcc& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mammut.topology.GetTopologyRes.Vcc)
}

void GetTopologyRes_Vcc::SharedCtor() {
  _cached_size_ = 0;
  cpu_id_ = 0u;
  physical_core_id_ = 0u;
  virtual_core_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetTopologyRes_Vcc::~GetTopologyRes_Vcc() {
  // @@protoc_insertion_point(destructor:mammut.topology.GetTopologyRes.Vcc)
  SharedDtor();
}

void GetTopologyRes_Vcc::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetTopologyRes_Vcc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetTopologyRes_Vcc& GetTopologyRes_Vcc::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_topology_2dremote_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_topology_2dremote_2eproto();
#endif
  return *default_instance_;
}

GetTopologyRes_Vcc* GetTopologyRes_Vcc::default_instance_ = NULL;

GetTopologyRes_Vcc* GetTopologyRes_Vcc::New() const {
  return new GetTopologyRes_Vcc;
}

void GetTopologyRes_Vcc::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GetTopologyRes_Vcc*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(cpu_id_, virtual_core_id_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool GetTopologyRes_Vcc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:mammut.topology.GetTopologyRes.Vcc)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 cpu_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cpu_id_)));
          set_has_cpu_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_physical_core_id;
        break;
      }

      // required uint32 physical_core_id = 2;
      case 2: {
        if (tag == 16) {
         parse_physical_core_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &physical_core_id_)));
          set_has_physical_core_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_virtual_core_id;
        break;
      }

      // required uint32 virtual_core_id = 3;
      case 3: {
        if (tag == 24) {
         parse_virtual_core_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &virtual_core_id_)));
          set_has_virtual_core_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mammut.topology.GetTopologyRes.Vcc)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mammut.topology.GetTopologyRes.Vcc)
  return false;
#undef DO_
}

void GetTopologyRes_Vcc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mammut.topology.GetTopologyRes.Vcc)
  // required uint32 cpu_id = 1;
  if (has_cpu_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cpu_id(), output);
  }

  // required uint32 physical_core_id = 2;
  if (has_physical_core_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->physical_core_id(), output);
  }

  // required uint32 virtual_core_id = 3;
  if (has_virtual_core_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->virtual_core_id(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:mammut.topology.GetTopologyRes.Vcc)
}

int GetTopologyRes_Vcc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 cpu_id = 1;
    if (has_cpu_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cpu_id());
    }

    // required uint32 physical_core_id = 2;
    if (has_physical_core_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->physical_core_id());
    }

    // required uint32 virtual_core_id = 3;
    if (has_virtual_core_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->virtual_core_id());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetTopologyRes_Vcc::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetTopologyRes_Vcc*>(&from));
}

void GetTopologyRes_Vcc::MergeFrom(const GetTopologyRes_Vcc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cpu_id()) {
      set_cpu_id(from.cpu_id());
    }
    if (from.has_physical_core_id()) {
      set_physical_core_id(from.physical_core_id());
    }
    if (from.has_virtual_core_id()) {
      set_virtual_core_id(from.virtual_core_id());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void GetTopologyRes_Vcc::CopyFrom(const GetTopologyRes_Vcc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTopologyRes_Vcc::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void GetTopologyRes_Vcc::Swap(GetTopologyRes_Vcc* other) {
  if (other != this) {
    std::swap(cpu_id_, other->cpu_id_);
    std::swap(physical_core_id_, other->physical_core_id_);
    std::swap(virtual_core_id_, other->virtual_core_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetTopologyRes_Vcc::GetTypeName() const {
  return "mammut.topology.GetTopologyRes.Vcc";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int GetTopologyRes::kCoordinatesFieldNumber;
#endif  // !_MSC_VER

GetTopologyRes::GetTopologyRes()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mammut.topology.GetTopologyRes)
}

void GetTopologyRes::InitAsDefaultInstance() {
}

GetTopologyRes::GetTopologyRes(const GetTopologyRes& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mammut.topology.GetTopologyRes)
}

void GetTopologyRes::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetTopologyRes::~GetTopologyRes() {
  // @@protoc_insertion_point(destructor:mammut.topology.GetTopologyRes)
  SharedDtor();
}

void GetTopologyRes::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetTopologyRes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetTopologyRes& GetTopologyRes::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_topology_2dremote_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_topology_2dremote_2eproto();
#endif
  return *default_instance_;
}

GetTopologyRes* GetTopologyRes::default_instance_ = NULL;

GetTopologyRes* GetTopologyRes::New() const {
  return new GetTopologyRes;
}

void GetTopologyRes::Clear() {
  coordinates_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool GetTopologyRes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:mammut.topology.GetTopologyRes)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .mammut.topology.GetTopologyRes.Vcc coordinates = 1;
      case 1: {
        if (tag == 10) {
         parse_coordinates:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_coordinates()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_coordinates;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mammut.topology.GetTopologyRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mammut.topology.GetTopologyRes)
  return false;
#undef DO_
}

void GetTopologyRes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mammut.topology.GetTopologyRes)
  // repeated .mammut.topology.GetTopologyRes.Vcc coordinates = 1;
  for (int i = 0; i < this->coordinates_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->coordinates(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:mammut.topology.GetTopologyRes)
}

int GetTopologyRes::ByteSize() const {
  int total_size = 0;

  // repeated .mammut.topology.GetTopologyRes.Vcc coordinates = 1;
  total_size += 1 * this->coordinates_size();
  for (int i = 0; i < this->coordinates_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->coordinates(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetTopologyRes::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetTopologyRes*>(&from));
}

void GetTopologyRes::MergeFrom(const GetTopologyRes& from) {
  GOOGLE_CHECK_NE(&from, this);
  coordinates_.MergeFrom(from.coordinates_);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void GetTopologyRes::CopyFrom(const GetTopologyRes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTopologyRes::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->coordinates())) return false;
  return true;
}

void GetTopologyRes::Swap(GetTopologyRes* other) {
  if (other != this) {
    coordinates_.Swap(&other->coordinates_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetTopologyRes::GetTypeName() const {
  return "mammut.topology.GetTopologyRes";
}


// ===================================================================

#ifndef _MSC_VER
const int GetCpuVendorId::kCpuIdFieldNumber;
#endif  // !_MSC_VER

GetCpuVendorId::GetCpuVendorId()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mammut.topology.GetCpuVendorId)
}

void GetCpuVendorId::InitAsDefaultInstance() {
}

GetCpuVendorId::GetCpuVendorId(const GetCpuVendorId& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mammut.topology.GetCpuVendorId)
}

void GetCpuVendorId::SharedCtor() {
  _cached_size_ = 0;
  cpu_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetCpuVendorId::~GetCpuVendorId() {
  // @@protoc_insertion_point(destructor:mammut.topology.GetCpuVendorId)
  SharedDtor();
}

void GetCpuVendorId::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetCpuVendorId::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetCpuVendorId& GetCpuVendorId::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_topology_2dremote_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_topology_2dremote_2eproto();
#endif
  return *default_instance_;
}

GetCpuVendorId* GetCpuVendorId::default_instance_ = NULL;

GetCpuVendorId* GetCpuVendorId::New() const {
  return new GetCpuVendorId;
}

void GetCpuVendorId::Clear() {
  cpu_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool GetCpuVendorId::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:mammut.topology.GetCpuVendorId)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 cpu_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cpu_id_)));
          set_has_cpu_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mammut.topology.GetCpuVendorId)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mammut.topology.GetCpuVendorId)
  return false;
#undef DO_
}

void GetCpuVendorId::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mammut.topology.GetCpuVendorId)
  // required uint32 cpu_id = 1;
  if (has_cpu_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cpu_id(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:mammut.topology.GetCpuVendorId)
}

int GetCpuVendorId::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 cpu_id = 1;
    if (has_cpu_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cpu_id());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetCpuVendorId::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetCpuVendorId*>(&from));
}

void GetCpuVendorId::MergeFrom(const GetCpuVendorId& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cpu_id()) {
      set_cpu_id(from.cpu_id());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void GetCpuVendorId::CopyFrom(const GetCpuVendorId& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetCpuVendorId::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GetCpuVendorId::Swap(GetCpuVendorId* other) {
  if (other != this) {
    std::swap(cpu_id_, other->cpu_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetCpuVendorId::GetTypeName() const {
  return "mammut.topology.GetCpuVendorId";
}


// ===================================================================

#ifndef _MSC_VER
const int GetCpuVendorIdRes::kVendorIdFieldNumber;
#endif  // !_MSC_VER

GetCpuVendorIdRes::GetCpuVendorIdRes()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mammut.topology.GetCpuVendorIdRes)
}

void GetCpuVendorIdRes::InitAsDefaultInstance() {
}

GetCpuVendorIdRes::GetCpuVendorIdRes(const GetCpuVendorIdRes& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mammut.topology.GetCpuVendorIdRes)
}

void GetCpuVendorIdRes::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  vendor_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetCpuVendorIdRes::~GetCpuVendorIdRes() {
  // @@protoc_insertion_point(destructor:mammut.topology.GetCpuVendorIdRes)
  SharedDtor();
}

void GetCpuVendorIdRes::SharedDtor() {
  if (vendor_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete vendor_id_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetCpuVendorIdRes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetCpuVendorIdRes& GetCpuVendorIdRes::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_topology_2dremote_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_topology_2dremote_2eproto();
#endif
  return *default_instance_;
}

GetCpuVendorIdRes* GetCpuVendorIdRes::default_instance_ = NULL;

GetCpuVendorIdRes* GetCpuVendorIdRes::New() const {
  return new GetCpuVendorIdRes;
}

void GetCpuVendorIdRes::Clear() {
  if (has_vendor_id()) {
    if (vendor_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      vendor_id_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool GetCpuVendorIdRes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:mammut.topology.GetCpuVendorIdRes)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string vendor_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vendor_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mammut.topology.GetCpuVendorIdRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mammut.topology.GetCpuVendorIdRes)
  return false;
#undef DO_
}

void GetCpuVendorIdRes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mammut.topology.GetCpuVendorIdRes)
  // required string vendor_id = 1;
  if (has_vendor_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->vendor_id(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:mammut.topology.GetCpuVendorIdRes)
}

int GetCpuVendorIdRes::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string vendor_id = 1;
    if (has_vendor_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->vendor_id());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetCpuVendorIdRes::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetCpuVendorIdRes*>(&from));
}

void GetCpuVendorIdRes::MergeFrom(const GetCpuVendorIdRes& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_vendor_id()) {
      set_vendor_id(from.vendor_id());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void GetCpuVendorIdRes::CopyFrom(const GetCpuVendorIdRes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetCpuVendorIdRes::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GetCpuVendorIdRes::Swap(GetCpuVendorIdRes* other) {
  if (other != this) {
    std::swap(vendor_id_, other->vendor_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetCpuVendorIdRes::GetTypeName() const {
  return "mammut.topology.GetCpuVendorIdRes";
}


// ===================================================================

#ifndef _MSC_VER
const int GetCpuFamily::kCpuIdFieldNumber;
#endif  // !_MSC_VER

GetCpuFamily::GetCpuFamily()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mammut.topology.GetCpuFamily)
}

void GetCpuFamily::InitAsDefaultInstance() {
}

GetCpuFamily::GetCpuFamily(const GetCpuFamily& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mammut.topology.GetCpuFamily)
}

void GetCpuFamily::SharedCtor() {
  _cached_size_ = 0;
  cpu_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetCpuFamily::~GetCpuFamily() {
  // @@protoc_insertion_point(destructor:mammut.topology.GetCpuFamily)
  SharedDtor();
}

void GetCpuFamily::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetCpuFamily::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetCpuFamily& GetCpuFamily::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_topology_2dremote_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_topology_2dremote_2eproto();
#endif
  return *default_instance_;
}

GetCpuFamily* GetCpuFamily::default_instance_ = NULL;

GetCpuFamily* GetCpuFamily::New() const {
  return new GetCpuFamily;
}

void GetCpuFamily::Clear() {
  cpu_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool GetCpuFamily::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:mammut.topology.GetCpuFamily)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 cpu_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cpu_id_)));
          set_has_cpu_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mammut.topology.GetCpuFamily)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mammut.topology.GetCpuFamily)
  return false;
#undef DO_
}

void GetCpuFamily::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mammut.topology.GetCpuFamily)
  // required uint32 cpu_id = 1;
  if (has_cpu_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cpu_id(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:mammut.topology.GetCpuFamily)
}

int GetCpuFamily::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 cpu_id = 1;
    if (has_cpu_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cpu_id());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetCpuFamily::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetCpuFamily*>(&from));
}

void GetCpuFamily::MergeFrom(const GetCpuFamily& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cpu_id()) {
      set_cpu_id(from.cpu_id());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void GetCpuFamily::CopyFrom(const GetCpuFamily& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetCpuFamily::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GetCpuFamily::Swap(GetCpuFamily* other) {
  if (other != this) {
    std::swap(cpu_id_, other->cpu_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetCpuFamily::GetTypeName() const {
  return "mammut.topology.GetCpuFamily";
}


// ===================================================================

#ifndef _MSC_VER
const int GetCpuFamilyRes::kFamilyFieldNumber;
#endif  // !_MSC_VER

GetCpuFamilyRes::GetCpuFamilyRes()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mammut.topology.GetCpuFamilyRes)
}

void GetCpuFamilyRes::InitAsDefaultInstance() {
}

GetCpuFamilyRes::GetCpuFamilyRes(const GetCpuFamilyRes& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mammut.topology.GetCpuFamilyRes)
}

void GetCpuFamilyRes::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  family_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetCpuFamilyRes::~GetCpuFamilyRes() {
  // @@protoc_insertion_point(destructor:mammut.topology.GetCpuFamilyRes)
  SharedDtor();
}

void GetCpuFamilyRes::SharedDtor() {
  if (family_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete family_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetCpuFamilyRes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetCpuFamilyRes& GetCpuFamilyRes::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_topology_2dremote_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_topology_2dremote_2eproto();
#endif
  return *default_instance_;
}

GetCpuFamilyRes* GetCpuFamilyRes::default_instance_ = NULL;

GetCpuFamilyRes* GetCpuFamilyRes::New() const {
  return new GetCpuFamilyRes;
}

void GetCpuFamilyRes::Clear() {
  if (has_family()) {
    if (family_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      family_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool GetCpuFamilyRes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:mammut.topology.GetCpuFamilyRes)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string family = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_family()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mammut.topology.GetCpuFamilyRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mammut.topology.GetCpuFamilyRes)
  return false;
#undef DO_
}

void GetCpuFamilyRes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mammut.topology.GetCpuFamilyRes)
  // required string family = 1;
  if (has_family()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->family(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:mammut.topology.GetCpuFamilyRes)
}

int GetCpuFamilyRes::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string family = 1;
    if (has_family()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->family());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetCpuFamilyRes::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetCpuFamilyRes*>(&from));
}

void GetCpuFamilyRes::MergeFrom(const GetCpuFamilyRes& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_family()) {
      set_family(from.family());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void GetCpuFamilyRes::CopyFrom(const GetCpuFamilyRes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetCpuFamilyRes::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GetCpuFamilyRes::Swap(GetCpuFamilyRes* other) {
  if (other != this) {
    std::swap(family_, other->family_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetCpuFamilyRes::GetTypeName() const {
  return "mammut.topology.GetCpuFamilyRes";
}


// ===================================================================

#ifndef _MSC_VER
const int GetCpuModel::kCpuIdFieldNumber;
#endif  // !_MSC_VER

GetCpuModel::GetCpuModel()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mammut.topology.GetCpuModel)
}

void GetCpuModel::InitAsDefaultInstance() {
}

GetCpuModel::GetCpuModel(const GetCpuModel& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mammut.topology.GetCpuModel)
}

void GetCpuModel::SharedCtor() {
  _cached_size_ = 0;
  cpu_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetCpuModel::~GetCpuModel() {
  // @@protoc_insertion_point(destructor:mammut.topology.GetCpuModel)
  SharedDtor();
}

void GetCpuModel::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetCpuModel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetCpuModel& GetCpuModel::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_topology_2dremote_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_topology_2dremote_2eproto();
#endif
  return *default_instance_;
}

GetCpuModel* GetCpuModel::default_instance_ = NULL;

GetCpuModel* GetCpuModel::New() const {
  return new GetCpuModel;
}

void GetCpuModel::Clear() {
  cpu_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool GetCpuModel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:mammut.topology.GetCpuModel)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 cpu_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cpu_id_)));
          set_has_cpu_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mammut.topology.GetCpuModel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mammut.topology.GetCpuModel)
  return false;
#undef DO_
}

void GetCpuModel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mammut.topology.GetCpuModel)
  // required uint32 cpu_id = 1;
  if (has_cpu_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cpu_id(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:mammut.topology.GetCpuModel)
}

int GetCpuModel::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 cpu_id = 1;
    if (has_cpu_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cpu_id());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetCpuModel::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetCpuModel*>(&from));
}

void GetCpuModel::MergeFrom(const GetCpuModel& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cpu_id()) {
      set_cpu_id(from.cpu_id());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void GetCpuModel::CopyFrom(const GetCpuModel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetCpuModel::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GetCpuModel::Swap(GetCpuModel* other) {
  if (other != this) {
    std::swap(cpu_id_, other->cpu_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetCpuModel::GetTypeName() const {
  return "mammut.topology.GetCpuModel";
}


// ===================================================================

#ifndef _MSC_VER
const int GetCpuModelRes::kModelFieldNumber;
#endif  // !_MSC_VER

GetCpuModelRes::GetCpuModelRes()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mammut.topology.GetCpuModelRes)
}

void GetCpuModelRes::InitAsDefaultInstance() {
}

GetCpuModelRes::GetCpuModelRes(const GetCpuModelRes& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mammut.topology.GetCpuModelRes)
}

void GetCpuModelRes::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  model_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetCpuModelRes::~GetCpuModelRes() {
  // @@protoc_insertion_point(destructor:mammut.topology.GetCpuModelRes)
  SharedDtor();
}

void GetCpuModelRes::SharedDtor() {
  if (model_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete model_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetCpuModelRes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetCpuModelRes& GetCpuModelRes::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_topology_2dremote_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_topology_2dremote_2eproto();
#endif
  return *default_instance_;
}

GetCpuModelRes* GetCpuModelRes::default_instance_ = NULL;

GetCpuModelRes* GetCpuModelRes::New() const {
  return new GetCpuModelRes;
}

void GetCpuModelRes::Clear() {
  if (has_model()) {
    if (model_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      model_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool GetCpuModelRes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:mammut.topology.GetCpuModelRes)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string model = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_model()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mammut.topology.GetCpuModelRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mammut.topology.GetCpuModelRes)
  return false;
#undef DO_
}

void GetCpuModelRes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mammut.topology.GetCpuModelRes)
  // required string model = 1;
  if (has_model()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->model(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:mammut.topology.GetCpuModelRes)
}

int GetCpuModelRes::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string model = 1;
    if (has_model()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->model());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetCpuModelRes::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetCpuModelRes*>(&from));
}

void GetCpuModelRes::MergeFrom(const GetCpuModelRes& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_model()) {
      set_model(from.model());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void GetCpuModelRes::CopyFrom(const GetCpuModelRes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetCpuModelRes::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GetCpuModelRes::Swap(GetCpuModelRes* other) {
  if (other != this) {
    std::swap(model_, other->model_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetCpuModelRes::GetTypeName() const {
  return "mammut.topology.GetCpuModelRes";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace topology
}  // namespace mammut

// @@protoc_insertion_point(global_scope)
