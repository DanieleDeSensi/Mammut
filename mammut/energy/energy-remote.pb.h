// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: energy-remote.proto

#ifndef PROTOBUF_energy_2dremote_2eproto__INCLUDED
#define PROTOBUF_energy_2dremote_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

namespace mammut {
namespace energy {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_energy_2dremote_2eproto();
void protobuf_AssignDesc_energy_2dremote_2eproto();
void protobuf_ShutdownFile_energy_2dremote_2eproto();

class CountersCpuGet;
class CountersCpuGetRes;
class CountersCpuGetRes_CounterCpu;
class CounterCpuReset;
class CounterCpuResetRes;
class CounterCpuGetJoules;
class CounterCpuGetJoulesRes;

enum CounterCpuType {
  COUNTER_CPU_TYPE_CPU = 0,
  COUNTER_CPU_TYPE_CORES = 1,
  COUNTER_CPU_TYPE_GRAPHIC = 2,
  COUNTER_CPU_TYPE_DRAM = 3
};
bool CounterCpuType_IsValid(int value);
const CounterCpuType CounterCpuType_MIN = COUNTER_CPU_TYPE_CPU;
const CounterCpuType CounterCpuType_MAX = COUNTER_CPU_TYPE_DRAM;
const int CounterCpuType_ARRAYSIZE = CounterCpuType_MAX + 1;

// ===================================================================

class CountersCpuGet : public ::google::protobuf::MessageLite {
 public:
  CountersCpuGet();
  virtual ~CountersCpuGet();

  CountersCpuGet(const CountersCpuGet& from);

  inline CountersCpuGet& operator=(const CountersCpuGet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const CountersCpuGet& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const CountersCpuGet* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(CountersCpuGet* other);

  // implements Message ----------------------------------------------

  CountersCpuGet* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const CountersCpuGet& from);
  void MergeFrom(const CountersCpuGet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mammut.energy.CountersCpuGet)
 private:

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_energy_2dremote_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_energy_2dremote_2eproto();
  #endif
  friend void protobuf_AssignDesc_energy_2dremote_2eproto();
  friend void protobuf_ShutdownFile_energy_2dremote_2eproto();

  void InitAsDefaultInstance();
  static CountersCpuGet* default_instance_;
};
// -------------------------------------------------------------------

class CountersCpuGetRes_CounterCpu : public ::google::protobuf::MessageLite {
 public:
  CountersCpuGetRes_CounterCpu();
  virtual ~CountersCpuGetRes_CounterCpu();

  CountersCpuGetRes_CounterCpu(const CountersCpuGetRes_CounterCpu& from);

  inline CountersCpuGetRes_CounterCpu& operator=(const CountersCpuGetRes_CounterCpu& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const CountersCpuGetRes_CounterCpu& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const CountersCpuGetRes_CounterCpu* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(CountersCpuGetRes_CounterCpu* other);

  // implements Message ----------------------------------------------

  CountersCpuGetRes_CounterCpu* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const CountersCpuGetRes_CounterCpu& from);
  void MergeFrom(const CountersCpuGetRes_CounterCpu& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 cpu_id = 1;
  inline bool has_cpu_id() const;
  inline void clear_cpu_id();
  static const int kCpuIdFieldNumber = 1;
  inline ::google::protobuf::uint32 cpu_id() const;
  inline void set_cpu_id(::google::protobuf::uint32 value);

  // required bool has_graphic = 2;
  inline bool has_has_graphic() const;
  inline void clear_has_graphic();
  static const int kHasGraphicFieldNumber = 2;
  inline bool has_graphic() const;
  inline void set_has_graphic(bool value);

  // required bool has_dram = 3;
  inline bool has_has_dram() const;
  inline void clear_has_dram();
  static const int kHasDramFieldNumber = 3;
  inline bool has_dram() const;
  inline void set_has_dram(bool value);

  // @@protoc_insertion_point(class_scope:mammut.energy.CountersCpuGetRes.CounterCpu)
 private:
  inline void set_has_cpu_id();
  inline void clear_has_cpu_id();
  inline void set_has_has_graphic();
  inline void clear_has_has_graphic();
  inline void set_has_has_dram();
  inline void clear_has_has_dram();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 cpu_id_;
  bool has_graphic_;
  bool has_dram_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_energy_2dremote_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_energy_2dremote_2eproto();
  #endif
  friend void protobuf_AssignDesc_energy_2dremote_2eproto();
  friend void protobuf_ShutdownFile_energy_2dremote_2eproto();

  void InitAsDefaultInstance();
  static CountersCpuGetRes_CounterCpu* default_instance_;
};
// -------------------------------------------------------------------

class CountersCpuGetRes : public ::google::protobuf::MessageLite {
 public:
  CountersCpuGetRes();
  virtual ~CountersCpuGetRes();

  CountersCpuGetRes(const CountersCpuGetRes& from);

  inline CountersCpuGetRes& operator=(const CountersCpuGetRes& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const CountersCpuGetRes& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const CountersCpuGetRes* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(CountersCpuGetRes* other);

  // implements Message ----------------------------------------------

  CountersCpuGetRes* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const CountersCpuGetRes& from);
  void MergeFrom(const CountersCpuGetRes& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  typedef CountersCpuGetRes_CounterCpu CounterCpu;

  // accessors -------------------------------------------------------

  // repeated .mammut.energy.CountersCpuGetRes.CounterCpu counters = 1;
  inline int counters_size() const;
  inline void clear_counters();
  static const int kCountersFieldNumber = 1;
  inline const ::mammut::energy::CountersCpuGetRes_CounterCpu& counters(int index) const;
  inline ::mammut::energy::CountersCpuGetRes_CounterCpu* mutable_counters(int index);
  inline ::mammut::energy::CountersCpuGetRes_CounterCpu* add_counters();
  inline const ::google::protobuf::RepeatedPtrField< ::mammut::energy::CountersCpuGetRes_CounterCpu >&
      counters() const;
  inline ::google::protobuf::RepeatedPtrField< ::mammut::energy::CountersCpuGetRes_CounterCpu >*
      mutable_counters();

  // @@protoc_insertion_point(class_scope:mammut.energy.CountersCpuGetRes)
 private:

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::mammut::energy::CountersCpuGetRes_CounterCpu > counters_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_energy_2dremote_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_energy_2dremote_2eproto();
  #endif
  friend void protobuf_AssignDesc_energy_2dremote_2eproto();
  friend void protobuf_ShutdownFile_energy_2dremote_2eproto();

  void InitAsDefaultInstance();
  static CountersCpuGetRes* default_instance_;
};
// -------------------------------------------------------------------

class CounterCpuReset : public ::google::protobuf::MessageLite {
 public:
  CounterCpuReset();
  virtual ~CounterCpuReset();

  CounterCpuReset(const CounterCpuReset& from);

  inline CounterCpuReset& operator=(const CounterCpuReset& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const CounterCpuReset& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const CounterCpuReset* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(CounterCpuReset* other);

  // implements Message ----------------------------------------------

  CounterCpuReset* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const CounterCpuReset& from);
  void MergeFrom(const CounterCpuReset& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 cpu_id = 1;
  inline bool has_cpu_id() const;
  inline void clear_cpu_id();
  static const int kCpuIdFieldNumber = 1;
  inline ::google::protobuf::uint32 cpu_id() const;
  inline void set_cpu_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:mammut.energy.CounterCpuReset)
 private:
  inline void set_has_cpu_id();
  inline void clear_has_cpu_id();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 cpu_id_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_energy_2dremote_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_energy_2dremote_2eproto();
  #endif
  friend void protobuf_AssignDesc_energy_2dremote_2eproto();
  friend void protobuf_ShutdownFile_energy_2dremote_2eproto();

  void InitAsDefaultInstance();
  static CounterCpuReset* default_instance_;
};
// -------------------------------------------------------------------

class CounterCpuResetRes : public ::google::protobuf::MessageLite {
 public:
  CounterCpuResetRes();
  virtual ~CounterCpuResetRes();

  CounterCpuResetRes(const CounterCpuResetRes& from);

  inline CounterCpuResetRes& operator=(const CounterCpuResetRes& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const CounterCpuResetRes& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const CounterCpuResetRes* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(CounterCpuResetRes* other);

  // implements Message ----------------------------------------------

  CounterCpuResetRes* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const CounterCpuResetRes& from);
  void MergeFrom(const CounterCpuResetRes& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mammut.energy.CounterCpuResetRes)
 private:

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_energy_2dremote_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_energy_2dremote_2eproto();
  #endif
  friend void protobuf_AssignDesc_energy_2dremote_2eproto();
  friend void protobuf_ShutdownFile_energy_2dremote_2eproto();

  void InitAsDefaultInstance();
  static CounterCpuResetRes* default_instance_;
};
// -------------------------------------------------------------------

class CounterCpuGetJoules : public ::google::protobuf::MessageLite {
 public:
  CounterCpuGetJoules();
  virtual ~CounterCpuGetJoules();

  CounterCpuGetJoules(const CounterCpuGetJoules& from);

  inline CounterCpuGetJoules& operator=(const CounterCpuGetJoules& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const CounterCpuGetJoules& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const CounterCpuGetJoules* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(CounterCpuGetJoules* other);

  // implements Message ----------------------------------------------

  CounterCpuGetJoules* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const CounterCpuGetJoules& from);
  void MergeFrom(const CounterCpuGetJoules& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 cpu_id = 1;
  inline bool has_cpu_id() const;
  inline void clear_cpu_id();
  static const int kCpuIdFieldNumber = 1;
  inline ::google::protobuf::uint32 cpu_id() const;
  inline void set_cpu_id(::google::protobuf::uint32 value);

  // required .mammut.energy.CounterCpuType type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::mammut::energy::CounterCpuType type() const;
  inline void set_type(::mammut::energy::CounterCpuType value);

  // @@protoc_insertion_point(class_scope:mammut.energy.CounterCpuGetJoules)
 private:
  inline void set_has_cpu_id();
  inline void clear_has_cpu_id();
  inline void set_has_type();
  inline void clear_has_type();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 cpu_id_;
  int type_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_energy_2dremote_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_energy_2dremote_2eproto();
  #endif
  friend void protobuf_AssignDesc_energy_2dremote_2eproto();
  friend void protobuf_ShutdownFile_energy_2dremote_2eproto();

  void InitAsDefaultInstance();
  static CounterCpuGetJoules* default_instance_;
};
// -------------------------------------------------------------------

class CounterCpuGetJoulesRes : public ::google::protobuf::MessageLite {
 public:
  CounterCpuGetJoulesRes();
  virtual ~CounterCpuGetJoulesRes();

  CounterCpuGetJoulesRes(const CounterCpuGetJoulesRes& from);

  inline CounterCpuGetJoulesRes& operator=(const CounterCpuGetJoulesRes& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const CounterCpuGetJoulesRes& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const CounterCpuGetJoulesRes* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(CounterCpuGetJoulesRes* other);

  // implements Message ----------------------------------------------

  CounterCpuGetJoulesRes* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const CounterCpuGetJoulesRes& from);
  void MergeFrom(const CounterCpuGetJoulesRes& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required double joules = 1;
  inline bool has_joules() const;
  inline void clear_joules();
  static const int kJoulesFieldNumber = 1;
  inline double joules() const;
  inline void set_joules(double value);

  // @@protoc_insertion_point(class_scope:mammut.energy.CounterCpuGetJoulesRes)
 private:
  inline void set_has_joules();
  inline void clear_has_joules();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double joules_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_energy_2dremote_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_energy_2dremote_2eproto();
  #endif
  friend void protobuf_AssignDesc_energy_2dremote_2eproto();
  friend void protobuf_ShutdownFile_energy_2dremote_2eproto();

  void InitAsDefaultInstance();
  static CounterCpuGetJoulesRes* default_instance_;
};
// ===================================================================


// ===================================================================

// CountersCpuGet

// -------------------------------------------------------------------

// CountersCpuGetRes_CounterCpu

// required uint32 cpu_id = 1;
inline bool CountersCpuGetRes_CounterCpu::has_cpu_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CountersCpuGetRes_CounterCpu::set_has_cpu_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CountersCpuGetRes_CounterCpu::clear_has_cpu_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CountersCpuGetRes_CounterCpu::clear_cpu_id() {
  cpu_id_ = 0u;
  clear_has_cpu_id();
}
inline ::google::protobuf::uint32 CountersCpuGetRes_CounterCpu::cpu_id() const {
  // @@protoc_insertion_point(field_get:mammut.energy.CountersCpuGetRes.CounterCpu.cpu_id)
  return cpu_id_;
}
inline void CountersCpuGetRes_CounterCpu::set_cpu_id(::google::protobuf::uint32 value) {
  set_has_cpu_id();
  cpu_id_ = value;
  // @@protoc_insertion_point(field_set:mammut.energy.CountersCpuGetRes.CounterCpu.cpu_id)
}

// required bool has_graphic = 2;
inline bool CountersCpuGetRes_CounterCpu::has_has_graphic() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CountersCpuGetRes_CounterCpu::set_has_has_graphic() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CountersCpuGetRes_CounterCpu::clear_has_has_graphic() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CountersCpuGetRes_CounterCpu::clear_has_graphic() {
  has_graphic_ = false;
  clear_has_has_graphic();
}
inline bool CountersCpuGetRes_CounterCpu::has_graphic() const {
  // @@protoc_insertion_point(field_get:mammut.energy.CountersCpuGetRes.CounterCpu.has_graphic)
  return has_graphic_;
}
inline void CountersCpuGetRes_CounterCpu::set_has_graphic(bool value) {
  set_has_has_graphic();
  has_graphic_ = value;
  // @@protoc_insertion_point(field_set:mammut.energy.CountersCpuGetRes.CounterCpu.has_graphic)
}

// required bool has_dram = 3;
inline bool CountersCpuGetRes_CounterCpu::has_has_dram() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CountersCpuGetRes_CounterCpu::set_has_has_dram() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CountersCpuGetRes_CounterCpu::clear_has_has_dram() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CountersCpuGetRes_CounterCpu::clear_has_dram() {
  has_dram_ = false;
  clear_has_has_dram();
}
inline bool CountersCpuGetRes_CounterCpu::has_dram() const {
  // @@protoc_insertion_point(field_get:mammut.energy.CountersCpuGetRes.CounterCpu.has_dram)
  return has_dram_;
}
inline void CountersCpuGetRes_CounterCpu::set_has_dram(bool value) {
  set_has_has_dram();
  has_dram_ = value;
  // @@protoc_insertion_point(field_set:mammut.energy.CountersCpuGetRes.CounterCpu.has_dram)
}

// -------------------------------------------------------------------

// CountersCpuGetRes

// repeated .mammut.energy.CountersCpuGetRes.CounterCpu counters = 1;
inline int CountersCpuGetRes::counters_size() const {
  return counters_.size();
}
inline void CountersCpuGetRes::clear_counters() {
  counters_.Clear();
}
inline const ::mammut::energy::CountersCpuGetRes_CounterCpu& CountersCpuGetRes::counters(int index) const {
  // @@protoc_insertion_point(field_get:mammut.energy.CountersCpuGetRes.counters)
  return counters_.Get(index);
}
inline ::mammut::energy::CountersCpuGetRes_CounterCpu* CountersCpuGetRes::mutable_counters(int index) {
  // @@protoc_insertion_point(field_mutable:mammut.energy.CountersCpuGetRes.counters)
  return counters_.Mutable(index);
}
inline ::mammut::energy::CountersCpuGetRes_CounterCpu* CountersCpuGetRes::add_counters() {
  // @@protoc_insertion_point(field_add:mammut.energy.CountersCpuGetRes.counters)
  return counters_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::mammut::energy::CountersCpuGetRes_CounterCpu >&
CountersCpuGetRes::counters() const {
  // @@protoc_insertion_point(field_list:mammut.energy.CountersCpuGetRes.counters)
  return counters_;
}
inline ::google::protobuf::RepeatedPtrField< ::mammut::energy::CountersCpuGetRes_CounterCpu >*
CountersCpuGetRes::mutable_counters() {
  // @@protoc_insertion_point(field_mutable_list:mammut.energy.CountersCpuGetRes.counters)
  return &counters_;
}

// -------------------------------------------------------------------

// CounterCpuReset

// required uint32 cpu_id = 1;
inline bool CounterCpuReset::has_cpu_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CounterCpuReset::set_has_cpu_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CounterCpuReset::clear_has_cpu_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CounterCpuReset::clear_cpu_id() {
  cpu_id_ = 0u;
  clear_has_cpu_id();
}
inline ::google::protobuf::uint32 CounterCpuReset::cpu_id() const {
  // @@protoc_insertion_point(field_get:mammut.energy.CounterCpuReset.cpu_id)
  return cpu_id_;
}
inline void CounterCpuReset::set_cpu_id(::google::protobuf::uint32 value) {
  set_has_cpu_id();
  cpu_id_ = value;
  // @@protoc_insertion_point(field_set:mammut.energy.CounterCpuReset.cpu_id)
}

// -------------------------------------------------------------------

// CounterCpuResetRes

// -------------------------------------------------------------------

// CounterCpuGetJoules

// required uint32 cpu_id = 1;
inline bool CounterCpuGetJoules::has_cpu_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CounterCpuGetJoules::set_has_cpu_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CounterCpuGetJoules::clear_has_cpu_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CounterCpuGetJoules::clear_cpu_id() {
  cpu_id_ = 0u;
  clear_has_cpu_id();
}
inline ::google::protobuf::uint32 CounterCpuGetJoules::cpu_id() const {
  // @@protoc_insertion_point(field_get:mammut.energy.CounterCpuGetJoules.cpu_id)
  return cpu_id_;
}
inline void CounterCpuGetJoules::set_cpu_id(::google::protobuf::uint32 value) {
  set_has_cpu_id();
  cpu_id_ = value;
  // @@protoc_insertion_point(field_set:mammut.energy.CounterCpuGetJoules.cpu_id)
}

// required .mammut.energy.CounterCpuType type = 2;
inline bool CounterCpuGetJoules::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CounterCpuGetJoules::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CounterCpuGetJoules::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CounterCpuGetJoules::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::mammut::energy::CounterCpuType CounterCpuGetJoules::type() const {
  // @@protoc_insertion_point(field_get:mammut.energy.CounterCpuGetJoules.type)
  return static_cast< ::mammut::energy::CounterCpuType >(type_);
}
inline void CounterCpuGetJoules::set_type(::mammut::energy::CounterCpuType value) {
  assert(::mammut::energy::CounterCpuType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:mammut.energy.CounterCpuGetJoules.type)
}

// -------------------------------------------------------------------

// CounterCpuGetJoulesRes

// required double joules = 1;
inline bool CounterCpuGetJoulesRes::has_joules() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CounterCpuGetJoulesRes::set_has_joules() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CounterCpuGetJoulesRes::clear_has_joules() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CounterCpuGetJoulesRes::clear_joules() {
  joules_ = 0;
  clear_has_joules();
}
inline double CounterCpuGetJoulesRes::joules() const {
  // @@protoc_insertion_point(field_get:mammut.energy.CounterCpuGetJoulesRes.joules)
  return joules_;
}
inline void CounterCpuGetJoulesRes::set_joules(double value) {
  set_has_joules();
  joules_ = value;
  // @@protoc_insertion_point(field_set:mammut.energy.CounterCpuGetJoulesRes.joules)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace energy
}  // namespace mammut

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_energy_2dremote_2eproto__INCLUDED
