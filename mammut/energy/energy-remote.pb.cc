// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: energy-remote.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "energy-remote.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace mammut {
namespace energy {

void protobuf_ShutdownFile_energy_2dremote_2eproto() {
  delete CountersCpuGet::default_instance_;
  delete CountersCpuGetRes::default_instance_;
  delete CountersCpuGetRes_CounterCpu::default_instance_;
  delete CounterCpuReset::default_instance_;
  delete CounterCpuResetRes::default_instance_;
  delete CounterCpuGetJoules::default_instance_;
  delete CounterCpuGetJoulesRes::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_energy_2dremote_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_energy_2dremote_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  CountersCpuGet::default_instance_ = new CountersCpuGet();
  CountersCpuGetRes::default_instance_ = new CountersCpuGetRes();
  CountersCpuGetRes_CounterCpu::default_instance_ = new CountersCpuGetRes_CounterCpu();
  CounterCpuReset::default_instance_ = new CounterCpuReset();
  CounterCpuResetRes::default_instance_ = new CounterCpuResetRes();
  CounterCpuGetJoules::default_instance_ = new CounterCpuGetJoules();
  CounterCpuGetJoulesRes::default_instance_ = new CounterCpuGetJoulesRes();
  CountersCpuGet::default_instance_->InitAsDefaultInstance();
  CountersCpuGetRes::default_instance_->InitAsDefaultInstance();
  CountersCpuGetRes_CounterCpu::default_instance_->InitAsDefaultInstance();
  CounterCpuReset::default_instance_->InitAsDefaultInstance();
  CounterCpuResetRes::default_instance_->InitAsDefaultInstance();
  CounterCpuGetJoules::default_instance_->InitAsDefaultInstance();
  CounterCpuGetJoulesRes::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_energy_2dremote_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_energy_2dremote_2eproto_once_);
void protobuf_AddDesc_energy_2dremote_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_energy_2dremote_2eproto_once_,
                 &protobuf_AddDesc_energy_2dremote_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_energy_2dremote_2eproto {
  StaticDescriptorInitializer_energy_2dremote_2eproto() {
    protobuf_AddDesc_energy_2dremote_2eproto();
  }
} static_descriptor_initializer_energy_2dremote_2eproto_;
#endif
bool CounterCpuType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CountersCpuGet::CountersCpuGet()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mammut.energy.CountersCpuGet)
}

void CountersCpuGet::InitAsDefaultInstance() {
}

CountersCpuGet::CountersCpuGet(const CountersCpuGet& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mammut.energy.CountersCpuGet)
}

void CountersCpuGet::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CountersCpuGet::~CountersCpuGet() {
  // @@protoc_insertion_point(destructor:mammut.energy.CountersCpuGet)
  SharedDtor();
}

void CountersCpuGet::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CountersCpuGet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CountersCpuGet& CountersCpuGet::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_energy_2dremote_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_energy_2dremote_2eproto();
#endif
  return *default_instance_;
}

CountersCpuGet* CountersCpuGet::default_instance_ = NULL;

CountersCpuGet* CountersCpuGet::New() const {
  return new CountersCpuGet;
}

void CountersCpuGet::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool CountersCpuGet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:mammut.energy.CountersCpuGet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:mammut.energy.CountersCpuGet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mammut.energy.CountersCpuGet)
  return false;
#undef DO_
}

void CountersCpuGet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mammut.energy.CountersCpuGet)
  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:mammut.energy.CountersCpuGet)
}

int CountersCpuGet::ByteSize() const {
  int total_size = 0;

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CountersCpuGet::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CountersCpuGet*>(&from));
}

void CountersCpuGet::MergeFrom(const CountersCpuGet& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void CountersCpuGet::CopyFrom(const CountersCpuGet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CountersCpuGet::IsInitialized() const {

  return true;
}

void CountersCpuGet::Swap(CountersCpuGet* other) {
  if (other != this) {
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CountersCpuGet::GetTypeName() const {
  return "mammut.energy.CountersCpuGet";
}


// ===================================================================

#ifndef _MSC_VER
const int CountersCpuGetRes_CounterCpu::kCpuIdFieldNumber;
const int CountersCpuGetRes_CounterCpu::kHasGraphicFieldNumber;
const int CountersCpuGetRes_CounterCpu::kHasDramFieldNumber;
#endif  // !_MSC_VER

CountersCpuGetRes_CounterCpu::CountersCpuGetRes_CounterCpu()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mammut.energy.CountersCpuGetRes.CounterCpu)
}

void CountersCpuGetRes_CounterCpu::InitAsDefaultInstance() {
}

CountersCpuGetRes_CounterCpu::CountersCpuGetRes_CounterCpu(const CountersCpuGetRes_CounterCpu& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mammut.energy.CountersCpuGetRes.CounterCpu)
}

void CountersCpuGetRes_CounterCpu::SharedCtor() {
  _cached_size_ = 0;
  cpu_id_ = 0u;
  has_graphic_ = false;
  has_dram_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CountersCpuGetRes_CounterCpu::~CountersCpuGetRes_CounterCpu() {
  // @@protoc_insertion_point(destructor:mammut.energy.CountersCpuGetRes.CounterCpu)
  SharedDtor();
}

void CountersCpuGetRes_CounterCpu::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CountersCpuGetRes_CounterCpu::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CountersCpuGetRes_CounterCpu& CountersCpuGetRes_CounterCpu::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_energy_2dremote_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_energy_2dremote_2eproto();
#endif
  return *default_instance_;
}

CountersCpuGetRes_CounterCpu* CountersCpuGetRes_CounterCpu::default_instance_ = NULL;

CountersCpuGetRes_CounterCpu* CountersCpuGetRes_CounterCpu::New() const {
  return new CountersCpuGetRes_CounterCpu;
}

void CountersCpuGetRes_CounterCpu::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CountersCpuGetRes_CounterCpu*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(cpu_id_, has_dram_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool CountersCpuGetRes_CounterCpu::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:mammut.energy.CountersCpuGetRes.CounterCpu)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 cpu_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cpu_id_)));
          set_has_cpu_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_has_graphic;
        break;
      }

      // required bool has_graphic = 2;
      case 2: {
        if (tag == 16) {
         parse_has_graphic:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_graphic_)));
          set_has_has_graphic();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_has_dram;
        break;
      }

      // required bool has_dram = 3;
      case 3: {
        if (tag == 24) {
         parse_has_dram:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_dram_)));
          set_has_has_dram();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mammut.energy.CountersCpuGetRes.CounterCpu)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mammut.energy.CountersCpuGetRes.CounterCpu)
  return false;
#undef DO_
}

void CountersCpuGetRes_CounterCpu::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mammut.energy.CountersCpuGetRes.CounterCpu)
  // required uint32 cpu_id = 1;
  if (has_cpu_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cpu_id(), output);
  }

  // required bool has_graphic = 2;
  if (has_has_graphic()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->has_graphic(), output);
  }

  // required bool has_dram = 3;
  if (has_has_dram()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->has_dram(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:mammut.energy.CountersCpuGetRes.CounterCpu)
}

int CountersCpuGetRes_CounterCpu::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 cpu_id = 1;
    if (has_cpu_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cpu_id());
    }

    // required bool has_graphic = 2;
    if (has_has_graphic()) {
      total_size += 1 + 1;
    }

    // required bool has_dram = 3;
    if (has_has_dram()) {
      total_size += 1 + 1;
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CountersCpuGetRes_CounterCpu::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CountersCpuGetRes_CounterCpu*>(&from));
}

void CountersCpuGetRes_CounterCpu::MergeFrom(const CountersCpuGetRes_CounterCpu& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cpu_id()) {
      set_cpu_id(from.cpu_id());
    }
    if (from.has_has_graphic()) {
      set_has_graphic(from.has_graphic());
    }
    if (from.has_has_dram()) {
      set_has_dram(from.has_dram());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void CountersCpuGetRes_CounterCpu::CopyFrom(const CountersCpuGetRes_CounterCpu& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CountersCpuGetRes_CounterCpu::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void CountersCpuGetRes_CounterCpu::Swap(CountersCpuGetRes_CounterCpu* other) {
  if (other != this) {
    std::swap(cpu_id_, other->cpu_id_);
    std::swap(has_graphic_, other->has_graphic_);
    std::swap(has_dram_, other->has_dram_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CountersCpuGetRes_CounterCpu::GetTypeName() const {
  return "mammut.energy.CountersCpuGetRes.CounterCpu";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CountersCpuGetRes::kCountersFieldNumber;
#endif  // !_MSC_VER

CountersCpuGetRes::CountersCpuGetRes()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mammut.energy.CountersCpuGetRes)
}

void CountersCpuGetRes::InitAsDefaultInstance() {
}

CountersCpuGetRes::CountersCpuGetRes(const CountersCpuGetRes& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mammut.energy.CountersCpuGetRes)
}

void CountersCpuGetRes::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CountersCpuGetRes::~CountersCpuGetRes() {
  // @@protoc_insertion_point(destructor:mammut.energy.CountersCpuGetRes)
  SharedDtor();
}

void CountersCpuGetRes::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CountersCpuGetRes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CountersCpuGetRes& CountersCpuGetRes::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_energy_2dremote_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_energy_2dremote_2eproto();
#endif
  return *default_instance_;
}

CountersCpuGetRes* CountersCpuGetRes::default_instance_ = NULL;

CountersCpuGetRes* CountersCpuGetRes::New() const {
  return new CountersCpuGetRes;
}

void CountersCpuGetRes::Clear() {
  counters_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool CountersCpuGetRes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:mammut.energy.CountersCpuGetRes)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .mammut.energy.CountersCpuGetRes.CounterCpu counters = 1;
      case 1: {
        if (tag == 10) {
         parse_counters:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_counters()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_counters;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mammut.energy.CountersCpuGetRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mammut.energy.CountersCpuGetRes)
  return false;
#undef DO_
}

void CountersCpuGetRes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mammut.energy.CountersCpuGetRes)
  // repeated .mammut.energy.CountersCpuGetRes.CounterCpu counters = 1;
  for (int i = 0; i < this->counters_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->counters(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:mammut.energy.CountersCpuGetRes)
}

int CountersCpuGetRes::ByteSize() const {
  int total_size = 0;

  // repeated .mammut.energy.CountersCpuGetRes.CounterCpu counters = 1;
  total_size += 1 * this->counters_size();
  for (int i = 0; i < this->counters_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->counters(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CountersCpuGetRes::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CountersCpuGetRes*>(&from));
}

void CountersCpuGetRes::MergeFrom(const CountersCpuGetRes& from) {
  GOOGLE_CHECK_NE(&from, this);
  counters_.MergeFrom(from.counters_);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void CountersCpuGetRes::CopyFrom(const CountersCpuGetRes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CountersCpuGetRes::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->counters())) return false;
  return true;
}

void CountersCpuGetRes::Swap(CountersCpuGetRes* other) {
  if (other != this) {
    counters_.Swap(&other->counters_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CountersCpuGetRes::GetTypeName() const {
  return "mammut.energy.CountersCpuGetRes";
}


// ===================================================================

#ifndef _MSC_VER
const int CounterCpuReset::kCpuIdFieldNumber;
#endif  // !_MSC_VER

CounterCpuReset::CounterCpuReset()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mammut.energy.CounterCpuReset)
}

void CounterCpuReset::InitAsDefaultInstance() {
}

CounterCpuReset::CounterCpuReset(const CounterCpuReset& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mammut.energy.CounterCpuReset)
}

void CounterCpuReset::SharedCtor() {
  _cached_size_ = 0;
  cpu_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CounterCpuReset::~CounterCpuReset() {
  // @@protoc_insertion_point(destructor:mammut.energy.CounterCpuReset)
  SharedDtor();
}

void CounterCpuReset::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CounterCpuReset::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CounterCpuReset& CounterCpuReset::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_energy_2dremote_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_energy_2dremote_2eproto();
#endif
  return *default_instance_;
}

CounterCpuReset* CounterCpuReset::default_instance_ = NULL;

CounterCpuReset* CounterCpuReset::New() const {
  return new CounterCpuReset;
}

void CounterCpuReset::Clear() {
  cpu_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool CounterCpuReset::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:mammut.energy.CounterCpuReset)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 cpu_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cpu_id_)));
          set_has_cpu_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mammut.energy.CounterCpuReset)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mammut.energy.CounterCpuReset)
  return false;
#undef DO_
}

void CounterCpuReset::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mammut.energy.CounterCpuReset)
  // required uint32 cpu_id = 1;
  if (has_cpu_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cpu_id(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:mammut.energy.CounterCpuReset)
}

int CounterCpuReset::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 cpu_id = 1;
    if (has_cpu_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cpu_id());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CounterCpuReset::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CounterCpuReset*>(&from));
}

void CounterCpuReset::MergeFrom(const CounterCpuReset& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cpu_id()) {
      set_cpu_id(from.cpu_id());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void CounterCpuReset::CopyFrom(const CounterCpuReset& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CounterCpuReset::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CounterCpuReset::Swap(CounterCpuReset* other) {
  if (other != this) {
    std::swap(cpu_id_, other->cpu_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CounterCpuReset::GetTypeName() const {
  return "mammut.energy.CounterCpuReset";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CounterCpuResetRes::CounterCpuResetRes()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mammut.energy.CounterCpuResetRes)
}

void CounterCpuResetRes::InitAsDefaultInstance() {
}

CounterCpuResetRes::CounterCpuResetRes(const CounterCpuResetRes& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mammut.energy.CounterCpuResetRes)
}

void CounterCpuResetRes::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CounterCpuResetRes::~CounterCpuResetRes() {
  // @@protoc_insertion_point(destructor:mammut.energy.CounterCpuResetRes)
  SharedDtor();
}

void CounterCpuResetRes::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CounterCpuResetRes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CounterCpuResetRes& CounterCpuResetRes::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_energy_2dremote_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_energy_2dremote_2eproto();
#endif
  return *default_instance_;
}

CounterCpuResetRes* CounterCpuResetRes::default_instance_ = NULL;

CounterCpuResetRes* CounterCpuResetRes::New() const {
  return new CounterCpuResetRes;
}

void CounterCpuResetRes::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool CounterCpuResetRes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:mammut.energy.CounterCpuResetRes)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:mammut.energy.CounterCpuResetRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mammut.energy.CounterCpuResetRes)
  return false;
#undef DO_
}

void CounterCpuResetRes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mammut.energy.CounterCpuResetRes)
  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:mammut.energy.CounterCpuResetRes)
}

int CounterCpuResetRes::ByteSize() const {
  int total_size = 0;

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CounterCpuResetRes::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CounterCpuResetRes*>(&from));
}

void CounterCpuResetRes::MergeFrom(const CounterCpuResetRes& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void CounterCpuResetRes::CopyFrom(const CounterCpuResetRes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CounterCpuResetRes::IsInitialized() const {

  return true;
}

void CounterCpuResetRes::Swap(CounterCpuResetRes* other) {
  if (other != this) {
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CounterCpuResetRes::GetTypeName() const {
  return "mammut.energy.CounterCpuResetRes";
}


// ===================================================================

#ifndef _MSC_VER
const int CounterCpuGetJoules::kCpuIdFieldNumber;
const int CounterCpuGetJoules::kTypeFieldNumber;
#endif  // !_MSC_VER

CounterCpuGetJoules::CounterCpuGetJoules()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mammut.energy.CounterCpuGetJoules)
}

void CounterCpuGetJoules::InitAsDefaultInstance() {
}

CounterCpuGetJoules::CounterCpuGetJoules(const CounterCpuGetJoules& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mammut.energy.CounterCpuGetJoules)
}

void CounterCpuGetJoules::SharedCtor() {
  _cached_size_ = 0;
  cpu_id_ = 0u;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CounterCpuGetJoules::~CounterCpuGetJoules() {
  // @@protoc_insertion_point(destructor:mammut.energy.CounterCpuGetJoules)
  SharedDtor();
}

void CounterCpuGetJoules::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CounterCpuGetJoules::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CounterCpuGetJoules& CounterCpuGetJoules::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_energy_2dremote_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_energy_2dremote_2eproto();
#endif
  return *default_instance_;
}

CounterCpuGetJoules* CounterCpuGetJoules::default_instance_ = NULL;

CounterCpuGetJoules* CounterCpuGetJoules::New() const {
  return new CounterCpuGetJoules;
}

void CounterCpuGetJoules::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CounterCpuGetJoules*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(cpu_id_, type_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool CounterCpuGetJoules::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:mammut.energy.CounterCpuGetJoules)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 cpu_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cpu_id_)));
          set_has_cpu_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required .mammut.energy.CounterCpuType type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mammut::energy::CounterCpuType_IsValid(value)) {
            set_type(static_cast< ::mammut::energy::CounterCpuType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mammut.energy.CounterCpuGetJoules)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mammut.energy.CounterCpuGetJoules)
  return false;
#undef DO_
}

void CounterCpuGetJoules::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mammut.energy.CounterCpuGetJoules)
  // required uint32 cpu_id = 1;
  if (has_cpu_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cpu_id(), output);
  }

  // required .mammut.energy.CounterCpuType type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:mammut.energy.CounterCpuGetJoules)
}

int CounterCpuGetJoules::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 cpu_id = 1;
    if (has_cpu_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cpu_id());
    }

    // required .mammut.energy.CounterCpuType type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CounterCpuGetJoules::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CounterCpuGetJoules*>(&from));
}

void CounterCpuGetJoules::MergeFrom(const CounterCpuGetJoules& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cpu_id()) {
      set_cpu_id(from.cpu_id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void CounterCpuGetJoules::CopyFrom(const CounterCpuGetJoules& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CounterCpuGetJoules::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CounterCpuGetJoules::Swap(CounterCpuGetJoules* other) {
  if (other != this) {
    std::swap(cpu_id_, other->cpu_id_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CounterCpuGetJoules::GetTypeName() const {
  return "mammut.energy.CounterCpuGetJoules";
}


// ===================================================================

#ifndef _MSC_VER
const int CounterCpuGetJoulesRes::kJoulesFieldNumber;
#endif  // !_MSC_VER

CounterCpuGetJoulesRes::CounterCpuGetJoulesRes()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mammut.energy.CounterCpuGetJoulesRes)
}

void CounterCpuGetJoulesRes::InitAsDefaultInstance() {
}

CounterCpuGetJoulesRes::CounterCpuGetJoulesRes(const CounterCpuGetJoulesRes& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mammut.energy.CounterCpuGetJoulesRes)
}

void CounterCpuGetJoulesRes::SharedCtor() {
  _cached_size_ = 0;
  joules_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CounterCpuGetJoulesRes::~CounterCpuGetJoulesRes() {
  // @@protoc_insertion_point(destructor:mammut.energy.CounterCpuGetJoulesRes)
  SharedDtor();
}

void CounterCpuGetJoulesRes::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CounterCpuGetJoulesRes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CounterCpuGetJoulesRes& CounterCpuGetJoulesRes::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_energy_2dremote_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_energy_2dremote_2eproto();
#endif
  return *default_instance_;
}

CounterCpuGetJoulesRes* CounterCpuGetJoulesRes::default_instance_ = NULL;

CounterCpuGetJoulesRes* CounterCpuGetJoulesRes::New() const {
  return new CounterCpuGetJoulesRes;
}

void CounterCpuGetJoulesRes::Clear() {
  joules_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool CounterCpuGetJoulesRes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:mammut.energy.CounterCpuGetJoulesRes)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double joules = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &joules_)));
          set_has_joules();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mammut.energy.CounterCpuGetJoulesRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mammut.energy.CounterCpuGetJoulesRes)
  return false;
#undef DO_
}

void CounterCpuGetJoulesRes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mammut.energy.CounterCpuGetJoulesRes)
  // required double joules = 1;
  if (has_joules()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->joules(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:mammut.energy.CounterCpuGetJoulesRes)
}

int CounterCpuGetJoulesRes::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double joules = 1;
    if (has_joules()) {
      total_size += 1 + 8;
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CounterCpuGetJoulesRes::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CounterCpuGetJoulesRes*>(&from));
}

void CounterCpuGetJoulesRes::MergeFrom(const CounterCpuGetJoulesRes& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_joules()) {
      set_joules(from.joules());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void CounterCpuGetJoulesRes::CopyFrom(const CounterCpuGetJoulesRes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CounterCpuGetJoulesRes::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CounterCpuGetJoulesRes::Swap(CounterCpuGetJoulesRes* other) {
  if (other != this) {
    std::swap(joules_, other->joules_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CounterCpuGetJoulesRes::GetTypeName() const {
  return "mammut.energy.CounterCpuGetJoulesRes";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace energy
}  // namespace mammut

// @@protoc_insertion_point(global_scope)
